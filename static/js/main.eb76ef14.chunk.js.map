{"version":3,"sources":["contactlist.js","updatecontact.js","contactAdd.js","App.js","serviceWorker.js","index.js"],"names":["ContactList","props","delete1","id","axios","delete","then","res","console","log","data","window","location","reload","state","contacts","get","setState","this","map","el","className","key","_id","name","phone","email","onClick","to","Component","Updatecontact","handleChange","e","target","value","UpdateContact","modifiedContact","Axios","put","params","match","placeholder","type","onChange","ContactAdd","setName","setTel","tel","setEmail","addcontact","alert","post","App","exact","path","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iTAkDeA,E,YA9CX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAedC,QAAQ,SAACC,GACLC,IAAMC,OAAO,wCAAwCF,GACpDG,MAAK,SAAAC,GAAOC,QAAQC,IAAIF,EAAIG,MAC7BC,OAAOC,SAASC,aAjBZ,EAAKC,MAAQ,CACTC,SAAS,IAHE,E,iFAYH,IAAD,OACfX,IAAMY,IAAI,kCACTV,MAAK,SAAAC,GAAG,OAAI,EAAKU,SAAS,CAACF,SAASR,EAAIG,Y,+BAU/B,IAAD,OACL,OACI,6BACKQ,KAAKJ,MAAMC,SAASI,KAAI,SAACC,GACtB,OACI,yBAAKC,UAAU,eAAeC,IAAKF,EAAGG,KAClC,2BAAG,uCAAkB,8BAAOH,EAAGI,OAC/B,2BAAG,wCAAmB,8BAAOJ,EAAGK,QAChC,2BAAG,wCAAmB,8BAAOL,EAAGM,QAChC,2BACA,0BAAMC,QAAS,WAAK,EAAKzB,QAAQkB,EAAGG,OAApC,aAEG,kBAAC,IAAD,CAAMK,GAAE,kBAAaR,EAAGG,IAAhB,YAAuBH,EAAGI,KAA1B,YAAkCJ,EAAGK,MAArC,YAA8CL,EAAGM,QAAzD,IAAmE,iD,GArCxEG,a,QCALC,E,YACjB,WAAY7B,GAAQ,IAAD,8BACf,4CAAMA,KAOV8B,aAAa,SAACC,GACV,EAAKf,SAAL,eACKe,EAAEC,OAAOT,KAAMQ,EAAEC,OAAOC,SAVd,EAsBnBC,cAAc,WACV,IAAIC,EAAiB,CACjBZ,KAAK,EAAKV,MAAMU,KAChBC,MAAM,EAAKX,MAAMW,MACjBC,MAAM,EAAKZ,MAAMY,OAErBW,IAAMC,IAAI,gCAAgC,EAAKxB,MAAMX,GAAGiC,IA1BxD,EAAKtB,MAAQ,CACTU,KAAK,GACLC,MAAM,GACNC,MAAM,IALK,E,iFAcf,IAAMa,EAAOrB,KAAKjB,MAAMuC,MAAMD,OAC9BrB,KAAKD,SAAS,CACVd,GAAGoC,EAAOpC,GACVqB,KAAKe,EAAOf,KACZC,MAAMc,EAAOd,MACbC,MAAMa,EAAOb,U,+BAWX,IAAD,OACL,OACI,6BACI,2BAAOF,KAAK,OAAOiB,YAAY,OAAOC,KAAK,OAAOR,MAAOhB,KAAKJ,MAAMU,KAAMmB,SAAU,SAACX,GAAD,OAAM,EAAKD,aAAaC,MAAM,6BAClH,2BAAOR,KAAK,QAAQiB,YAAY,QAAQC,KAAK,OAAOR,MAAOhB,KAAKJ,MAAMW,MAAOkB,SAAU,SAACX,GAAD,OAAM,EAAKD,aAAaC,MAAK,6BACpH,2BAAOR,KAAK,QAAQiB,YAAY,QAAQC,KAAK,OAAOR,MAAOhB,KAAKJ,MAAMY,MAAOiB,SAAU,SAACX,GAAD,OAAM,EAAKD,aAAaC,MACnH,0BAAML,QAAST,KAAKiB,eAApB,iB,GArC+BN,aCuD5Be,E,YAtDb,WAAY3C,GAAO,IAAD,8BAChB,4CAAMA,KAOR4C,QAAQ,SAAAb,GACN,EAAKf,SAAS,CACdO,KAAKQ,EAAEC,OAAOC,SAVE,EAYlBY,OAAO,SAAAd,GAAO,EAAKf,SAAS,CAC1B8B,IAAIf,EAAEC,OAAOC,SAbG,EAelBc,SAAS,SAAAhB,GAAO,EAAKf,SAAS,CAC5BS,MAAMM,EAAEC,OAAOC,SAhBC,EAkBlBe,WAAa,WACa,KAApB,EAAKnC,MAAMU,MAAmC,KAAnB,EAAKV,MAAMiC,KAAmC,KAArB,EAAKjC,MAAMY,MAKhEwB,MAAM,0CAJT9C,IAAM+C,KAAK,gCAAgC,CAC1C3B,KAAK,EAAKV,MAAMU,KAAKuB,IAAI,EAAKjC,MAAMiC,IAAIrB,MAAM,EAAKZ,MAAMY,SAnB1D,EAAKZ,MAAO,CACVU,KAAK,GACLuB,IAAI,GACJrB,MAAM,IALQ,E,sEA2BZ,OACG,8BACH,gDAGA,6BACA,6BACA,0BAAML,UAAU,YAAhB,SACA,6BACA,2BAAOqB,KAAK,OAAOC,SAAUzB,KAAK2B,UAClC,6BACA,0BAAMxB,UAAU,YAAhB,QACA,6BACA,2BAAOqB,KAAK,OAAOC,SAAUzB,KAAK4B,SAClC,6BACA,6BACA,0BAAMzB,UAAU,YAAhB,UACA,6BACA,2BAAOqB,KAAK,QAAQC,SAAUzB,KAAK8B,WACnC,6BACA,6BACA,6BACL,0BAAMrB,QAAST,KAAK+B,YAApB,e,GAlDsBpB,aCiCVuB,MA5Bf,WACE,OACE,kBAAC,IAAD,KACA,yBAAK/B,UAAU,OACb,2CAGA,kBAAC,IAAD,CAAMO,GAAE,aAAe,iDACvB,kBAAC,IAAD,CAAMA,GAAE,QAAU,wCAQlB,yBAAKP,UAAU,eAEf,kBAAC,IAAD,CAAOgC,OAAK,EAACC,KAAK,YAAYC,UAAWvD,IACzC,kBAAC,IAAD,CAAOqD,OAAK,EAACC,KAAK,OAAOC,UAAWX,IAEpC,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,kCAAkCC,UAAWzB,QCjBjD0B,QACW,cAA7B7C,OAAOC,SAAS6C,UAEe,UAA7B9C,OAAOC,SAAS6C,UAEhB9C,OAAOC,SAAS6C,SAASjB,MACvB,2DCZNkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1D,MAAK,SAAA2D,GACjCA,EAAaC,kB","file":"static/js/main.eb76ef14.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport {Link } from 'react-router-dom'\r\nclass ContactList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            contacts:[]\r\n         }\r\n    }\r\n\r\n/**    ComponentDidMount(){\r\n        axios.get(\"http://localhost:4000/contacts\")\r\n        .then(res => this.setState({contacts:res.data}))\r\n    } */\r\n\r\ncomponentDidMount(){\r\n    axios.get(\"http://localhost:4000/contacts\")\r\n    .then(res => this.setState({contacts:res.data}))\r\n}\r\ndelete1=(id)=>{\r\n    axios.delete(\"http://localhost:4000/delete_contact/\"+id)\r\n    .then(res =>{console.log(res.data);\r\n    window.location.reload()}\r\n    \r\n    )\r\n   \r\n}\r\n    render() { \r\n        return ( \r\n            <div>\r\n                {this.state.contacts.map((el) =>{\r\n                    return(\r\n                        <div className=\"contact-card\" key={el._id}>\r\n                            <p><span>Name:</span><span>{el.name}</span></p>\r\n                            <p><span>Phone:</span><span>{el.phone}</span></p>\r\n                            <p><span>Email:</span><span>{el.email}</span></p>\r\n                            <p>\r\n                            <span onClick={()=>{this.delete1(el._id)}}>Supprimer</span>\r\n                               { /**name/:phone/:emai */}\r\n                               <Link to={`/update/${el._id}/${el.name}/${el.phone}/${el.email}`}> <span>Edit</span></Link>\r\n                            </p>\r\n                        </div>\r\n                    )\r\n                } )}\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default ContactList;","import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\n\r\nexport default class Updatecontact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            name:'',\r\n            phone:'',\r\n            email:''\r\n         }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        const params=this.props.match.params\r\n        this.setState({\r\n            id:params.id,\r\n            name:params.name,\r\n            phone:params.phone,\r\n            email:params.email\r\n        })\r\n    }\r\n    UpdateContact=()=>{\r\n        let modifiedContact ={\r\n            name:this.state.name,\r\n            phone:this.state.phone,\r\n            email:this.state.email\r\n        }\r\n        Axios.put('http://localhost:4000/update/'+this.state.id,modifiedContact)\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input name=\"name\" placeholder=\"name\" type=\"text\" value={this.state.name} onChange={(e) =>this.handleChange(e)} /><br/>\r\n                <input name=\"phone\" placeholder=\"phone\" type=\"text\" value={this.state.phone} onChange={(e) =>this.handleChange(e)}/><br/>\r\n                <input name=\"email\" placeholder=\"email\" type=\"text\" value={this.state.email} onChange={(e) =>this.handleChange(e)}/>\r\n            <span onClick={this.UpdateContact}>modifier</span>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport {Link } from 'react-router-dom';\r\nclass ContactAdd extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state=({\r\n      name:'',\r\n      tel:'',\r\n      email:'',\r\n    })\r\n  }\r\n  setName=e=> {\r\n    this.setState({\r\n    name:e.target.value\r\n  })}\r\n  setTel=e=> {  this.setState({\r\n    tel:e.target.value\r\n  })}\r\n  setEmail=e=> {  this.setState({\r\n    email:e.target.value\r\n  })}\r\n  addcontact = () => {\r\n    if (this.state.name !== '' && (this.state.tel !== '' || this.state.email !== '')) {\r\n    axios.post(\"http://localhost:4000/contact\",{\r\n     name:this.state.name,tel:this.state.tel,email:this.state.email\r\n    })\r\n  }\r\nelse { alert('Required fields!! Name or tel or email') }\r\n}\r\n       render() {\r\n        return (\r\n           <form >\r\n        <h2>\r\n          ADD contact Page\r\n        </h2>\r\n        <br/>\r\n        <br/>\r\n        <span className=\"subtitle\">NAME:</span>\r\n        <br/>\r\n        <input type=\"text\" onChange={this.setName}  />\r\n        <br/>\r\n        <span className=\"subtitle\">Tel:</span>\r\n        <br/>\r\n        <input type=\"text\" onChange={this.setTel}  />\r\n        <br/>\r\n        <br/>\r\n        <span className=\"subtitle\">EMAIL:</span>\r\n        <br/>\r\n        <input type=\"email\" onChange={this.setEmail}  />\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n   <span onClick={this.addcontact} >Submit</span> \r\n     </form>\r\n      );\r\n    }\r\n}\r\nexport default ContactAdd","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route,Link } from 'react-router-dom';\nimport ContactList from './contactlist';\nimport Updatecontact from './updatecontact'\nimport ContactAdd from './contactAdd'\n\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <h1>Contact App</h1>\n      \n      \n      <Link to={`/contacts`}><button>Contact List</button></Link>\n      <Link to={`/add`}><button>Add</button></Link>\n      \n      \n     \n    \n    \n    \n    \n      <div className=\"add-contact\">\n  \n      <Route exact path='/contacts' component={ContactList}/>\n      <Route exact path='/add' component={ContactAdd}/>\n\n      <Route exact path='/update/:id/:name/:phone/:email' component={Updatecontact}/>\n      </div>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}